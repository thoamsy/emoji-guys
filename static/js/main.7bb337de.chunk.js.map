{"version":3,"sources":["constants/RISL.js","util/index.js","constants/keycap.js","constants/control.js","constants/people.js","constants/modify.js","DragableWord.jsx","DroppableContainer.jsx","App.js","index.js"],"names":["risls","Array","from","length","_","i","String","fromCodePoint","getSequenceEmoji","startCodePoint","getCombineSequenceEmoji","combine","concat","map","code","fromCharCode","keycodesText","keycodesEmoji","getEmoji","boy","gril","man","DraggableWord","children","useState","isDragging","setDrag","style","cursor","width","height","margin","draggable","onDragEnd","onDragStart","event","dataTransfer","setData","a","codePointAt","onDrag","e","DroppableContainer","saved","localStorage","getItem","JSON","parse","codes","setCodes","isEntering","setEntering","className","onDrop","data","getData","isSequence","includes","preventDefault","prevCode","of","split","setItem","stringify","onDragLeave","onDragEnter","dropEffect","onDragOver","isText","types","border","background","index","DragableWord","key","isArray","App","Typography","text","RISL","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.7bb337de.chunk.js","sourcesContent":["// all regional indicator symbol letter\n\nconst codePointA = 0x1f1e6;\n\nconst risls = Array.from({ length: 26 }, (_, i) =>\n  String.fromCodePoint(i + codePointA),\n);\n\nexport default risls;\n","export const getSequenceEmoji = (startCodePoint, length) =>\n  Array.from({ length }, (_, i) => String.fromCodePoint(i + startCodePoint));\n\nexport const getCombineSequenceEmoji = (startCodePoint, length, combine) =>\n  Array.from({ length }, (_, i) =>\n    [startCodePoint + i].concat(combine),\n  ).map(code => String.fromCharCode(...code));\n","import { getCombineSequenceEmoji } from '../util';\nimport { VS16, VS15 } from './control';\n\nconst enclosing = 0x20e3;\nconst zero = 0x30;\n\nexport const keycodesText = getCombineSequenceEmoji(zero, 10, [\n  VS15,\n  enclosing,\n]);\n\nexport const keycodesEmoji = getCombineSequenceEmoji(zero, 10, [\n  VS16,\n  enclosing,\n]);\n","export const VS15 = 0xfe0e;\nexport const VS16 = 0xfe0f;\nexport const ZWJ = 0x200d;\n","const getEmoji = String.fromCodePoint;\n\nconst boy = 0x1f466;\nconst gril = boy + 1;\nconst man = gril + 1;\nconst woman = man + 1;\nconst person = 0x1f471;\n\nexport const boyEmoji = getEmoji(0x1f466);\nexport const grilEmoji = getEmoji(gril);\nexport const manEmoji = getEmoji(man);\nexport const womanEmoji = getEmoji(woman);\nexport const personEmoji = getEmoji(person);\n","import { getSequenceEmoji } from '../util';\n\nconst NUMBER_OF_SKINS = 5;\nexport const skins = getSequenceEmoji(0x1f3fb, NUMBER_OF_SKINS);\nconst NUMBER_OF_HAIRS = 4;\nexport const hairs = getSequenceEmoji(0x1f9b1, NUMBER_OF_HAIRS);\n","import React, { useState } from 'react';\n\nconst DraggableWord = ({ children }) => {\n  const [isDragging, setDrag] = useState(false);\n  return (\n    <span\n      style={{\n        cursor: isDragging ? 'grabbing' : 'grab',\n        width: 24,\n        height: 24,\n        margin: 4,\n      }}\n      draggable=\"true\"\n      onDragEnd={() => {\n        setDrag(false);\n      }}\n      onDragStart={event => {\n        setDrag(true);\n        event.dataTransfer.setData(\n          'text/plain',\n          [...children].map(a => a.codePointAt(0)),\n        );\n      }}\n      onDrag={e => {}}\n    >\n      {children}\n    </span>\n  );\n};\nexport default DraggableWord;\n","import React, { useState } from 'react';\nimport DragableWord from './DragableWord';\n\nconst KEY = 'EMOJIS';\nconst DroppableContainer = () => {\n  const [codes, setCodes] = useState(() => {\n    const saved = localStorage.getItem(KEY);\n    if (!saved) {\n      return [];\n    }\n    return JSON.parse(saved);\n  });\n  const [isEntering, setEntering] = useState(false);\n\n  return (\n    <div\n      className=\"dropzone\"\n      onDrop={e => {\n        const data = e.dataTransfer.getData('text/plain');\n        const isSequence = data.includes(',');\n\n        e.preventDefault();\n        setEntering(false);\n        setCodes(prevCode => {\n          const codes = prevCode.concat(\n            Array.of(isSequence ? data.split(',') : data),\n          );\n          localStorage.setItem(KEY, JSON.stringify(codes));\n          return codes;\n        });\n      }}\n      onDragLeave={() => {\n        setEntering(false);\n      }}\n      onDragEnter={e => {\n        e.dataTransfer.dropEffect = 'copy';\n        setEntering(true);\n        e.preventDefault();\n      }}\n      onDragOver={e => {\n        const isText = e.dataTransfer.types.includes('text/plain');\n        e.dataTransfer.dropEffect = 'copy';\n        if (isText) {\n          e.preventDefault();\n        }\n      }}\n      style={{\n        height: 300,\n        width: 600,\n        border: `4px dashed ${isEntering ? '#a0a0a0' : '#e5e5e5'}`,\n        background: isEntering ? '#fafafa' : '',\n      }}\n    >\n      {codes.map((code, index) => {\n        return (\n          <DragableWord key={index}>\n            {Array.isArray(code)\n              ? String.fromCodePoint(...code)\n              : String.fromCodePoint(code)}\n          </DragableWord>\n        );\n      })}\n    </div>\n  );\n};\n\nexport default DroppableContainer;\n","import React from 'react';\nimport './style.css';\nimport Typography from '@material-ui/core/Typography';\nimport { RISL, keycodesEmoji, keycodesText } from './constants';\nimport DraggableWord from './DragableWord';\nimport DroppableContainer from './DroppableContainer';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <Typography>键帽</Typography>\n        {keycodesEmoji.map((text, i) => (\n          <DraggableWord key={i}>{text}</DraggableWord>\n        ))}\n        <br />\n        <Typography>数字</Typography>\n        {keycodesText.map((text, i) => (\n          <DraggableWord key={i}>{text}</DraggableWord>\n        ))}\n        <Typography>地区码</Typography>\n        {RISL.map((text, i) => (\n          <DraggableWord key={i}>{text}</DraggableWord>\n        ))}\n      </header>\n      <DroppableContainer></DroppableContainer>\n    </div>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}